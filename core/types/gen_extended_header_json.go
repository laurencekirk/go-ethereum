// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package types

import (
	"encoding/json"
	"errors"
)

var _ = (*extendedHeaderMarshaling)(nil)

func (e ExtendedHeader) MarshalJSON() ([]byte, error) {
	type ExtendedHeader struct {
		Seed          Signature `json:"seed"            gencodec:"required"`
		Authorisation Signature `json:"authorisation"   gencodec:"required"`
	}
	var enc ExtendedHeader
	enc.Seed = e.Seed
	enc.Authorisation = e.Authorisation
	return json.Marshal(&enc)
}

func (e *ExtendedHeader) UnmarshalJSON(input []byte) error {
	type ExtendedHeader struct {
		Seed          *Signature `json:"seed"            gencodec:"required"`
		Authorisation *Signature `json:"authorisation"   gencodec:"required"`
	}
	var dec ExtendedHeader
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Seed == nil {
		return errors.New("missing required field 'seed' for ExtendedHeader")
	}
	e.Seed = *dec.Seed
	if dec.Authorisation == nil {
		return errors.New("missing required field 'authorisation' for ExtendedHeader")
	}
	e.Authorisation = *dec.Authorisation
	return nil
}
