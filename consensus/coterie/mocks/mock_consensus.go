// Code generated by MockGen. DO NOT EDIT.
// Source: consensus.go

// Package mocks is a generated GoMock package.
package mocks

import (
	common "github.com/ethereum/go-ethereum/common"
	state "github.com/ethereum/go-ethereum/core/state"
	types "github.com/ethereum/go-ethereum/core/types"
	params "github.com/ethereum/go-ethereum/params"
	rpc "github.com/ethereum/go-ethereum/rpc"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	consensus "github.com/ethereum/go-ethereum/consensus"
)

// MockChainReader is a mock of ChainReader interface
type MockChainReader struct {
	ctrl     *gomock.Controller
	recorder *MockChainReaderMockRecorder
}

// MockChainReaderMockRecorder is the mock recorder for MockChainReader
type MockChainReaderMockRecorder struct {
	mock *MockChainReader
}

// NewMockChainReader creates a new mock instance
func NewMockChainReader(ctrl *gomock.Controller) *MockChainReader {
	mock := &MockChainReader{ctrl: ctrl}
	mock.recorder = &MockChainReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainReader) EXPECT() *MockChainReaderMockRecorder {
	return m.recorder
}

// Config mocks base method
func (m *MockChainReader) Config() *params.ChainConfig {
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// Config indicates an expected call of Config
func (mr *MockChainReaderMockRecorder) Config() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockChainReader)(nil).Config))
}

// CurrentHeader mocks base method
func (m *MockChainReader) CurrentHeader() *types.Header {
	ret := m.ctrl.Call(m, "CurrentHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// CurrentHeader indicates an expected call of CurrentHeader
func (mr *MockChainReaderMockRecorder) CurrentHeader() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeader", reflect.TypeOf((*MockChainReader)(nil).CurrentHeader))
}

// GetHeader mocks base method
func (m *MockChainReader) GetHeader(hash common.Hash, number uint64) *types.Header {
	ret := m.ctrl.Call(m, "GetHeader", hash, number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader
func (mr *MockChainReaderMockRecorder) GetHeader(hash, number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockChainReader)(nil).GetHeader), hash, number)
}

// GetHeaderByNumber mocks base method
func (m *MockChainReader) GetHeaderByNumber(number uint64) *types.Header {
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber
func (mr *MockChainReaderMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByNumber), number)
}

// GetHeaderByHash mocks base method
func (m *MockChainReader) GetHeaderByHash(hash common.Hash) *types.Header {
	ret := m.ctrl.Call(m, "GetHeaderByHash", hash)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByHash indicates an expected call of GetHeaderByHash
func (mr *MockChainReaderMockRecorder) GetHeaderByHash(hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByHash", reflect.TypeOf((*MockChainReader)(nil).GetHeaderByHash), hash)
}

// GetBlock mocks base method
func (m *MockChainReader) GetBlock(hash common.Hash, number uint64) *types.Block {
	ret := m.ctrl.Call(m, "GetBlock", hash, number)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockChainReaderMockRecorder) GetBlock(hash, number interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockChainReader)(nil).GetBlock), hash, number)
}

// MockEngine is a mock of Engine interface
type MockEngine struct {
	ctrl     *gomock.Controller
	recorder *MockEngineMockRecorder
}

// MockEngineMockRecorder is the mock recorder for MockEngine
type MockEngineMockRecorder struct {
	mock *MockEngine
}

// NewMockEngine creates a new mock instance
func NewMockEngine(ctrl *gomock.Controller) *MockEngine {
	mock := &MockEngine{ctrl: ctrl}
	mock.recorder = &MockEngineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEngine) EXPECT() *MockEngineMockRecorder {
	return m.recorder
}

// Author mocks base method
func (m *MockEngine) Author(header *types.Header) (common.Address, error) {
	ret := m.ctrl.Call(m, "Author", header)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Author indicates an expected call of Author
func (mr *MockEngineMockRecorder) Author(header interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Author", reflect.TypeOf((*MockEngine)(nil).Author), header)
}

// VerifyHeader mocks base method
func (m *MockEngine) VerifyHeader(chain consensus.ChainReader, header *types.Header, seal bool) error {
	ret := m.ctrl.Call(m, "VerifyHeader", chain, header, seal)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader
func (mr *MockEngineMockRecorder) VerifyHeader(chain, header, seal interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockEngine)(nil).VerifyHeader), chain, header, seal)
}

// VerifyHeaders mocks base method
func (m *MockEngine) VerifyHeaders(chain consensus.ChainReader, headers []*types.Header, seals []bool) (chan<- struct{}, <-chan error) {
	ret := m.ctrl.Call(m, "VerifyHeaders", chain, headers, seals)
	ret0, _ := ret[0].(chan<- struct{})
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// VerifyHeaders indicates an expected call of VerifyHeaders
func (mr *MockEngineMockRecorder) VerifyHeaders(chain, headers, seals interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeaders", reflect.TypeOf((*MockEngine)(nil).VerifyHeaders), chain, headers, seals)
}

// VerifyUncles mocks base method
func (m *MockEngine) VerifyUncles(chain consensus.ChainReader, block *types.Block) error {
	ret := m.ctrl.Call(m, "VerifyUncles", chain, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUncles indicates an expected call of VerifyUncles
func (mr *MockEngineMockRecorder) VerifyUncles(chain, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUncles", reflect.TypeOf((*MockEngine)(nil).VerifyUncles), chain, block)
}

// VerifySeal mocks base method
func (m *MockEngine) VerifySeal(chain consensus.ChainReader, header *types.Header) error {
	ret := m.ctrl.Call(m, "VerifySeal", chain, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySeal indicates an expected call of VerifySeal
func (mr *MockEngineMockRecorder) VerifySeal(chain, header interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySeal", reflect.TypeOf((*MockEngine)(nil).VerifySeal), chain, header)
}

// Prepare mocks base method
func (m *MockEngine) Prepare(chain consensus.ChainReader, header *types.Header) error {
	ret := m.ctrl.Call(m, "Prepare", chain, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare
func (mr *MockEngineMockRecorder) Prepare(chain, header interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockEngine)(nil).Prepare), chain, header)
}

// Finalize mocks base method
func (m *MockEngine) Finalize(chain consensus.ChainReader, header *types.Header, state *state.StateDB, txs []*types.Transaction, uncles []*types.Header, receipts []*types.Receipt) (*types.Block, error) {
	ret := m.ctrl.Call(m, "Finalize", chain, header, state, txs, uncles, receipts)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalize indicates an expected call of Finalize
func (mr *MockEngineMockRecorder) Finalize(chain, header, state, txs, uncles, receipts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockEngine)(nil).Finalize), chain, header, state, txs, uncles, receipts)
}

// Seal mocks base method
func (m *MockEngine) Seal(chain consensus.ChainReader, block *types.Block, stop <-chan struct{}) (*types.Block, error) {
	ret := m.ctrl.Call(m, "Seal", chain, block, stop)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal
func (mr *MockEngineMockRecorder) Seal(chain, block, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockEngine)(nil).Seal), chain, block, stop)
}

// APIs mocks base method
func (m *MockEngine) APIs(chain consensus.ChainReader) []rpc.API {
	ret := m.ctrl.Call(m, "APIs", chain)
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs
func (mr *MockEngineMockRecorder) APIs(chain interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockEngine)(nil).APIs), chain)
}

// MockPoW is a mock of PoW interface
type MockPoW struct {
	ctrl     *gomock.Controller
	recorder *MockPoWMockRecorder
}

// MockPoWMockRecorder is the mock recorder for MockPoW
type MockPoWMockRecorder struct {
	mock *MockPoW
}

// NewMockPoW creates a new mock instance
func NewMockPoW(ctrl *gomock.Controller) *MockPoW {
	mock := &MockPoW{ctrl: ctrl}
	mock.recorder = &MockPoWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPoW) EXPECT() *MockPoWMockRecorder {
	return m.recorder
}

// Author mocks base method
func (m *MockPoW) Author(header *types.Header) (common.Address, error) {
	ret := m.ctrl.Call(m, "Author", header)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Author indicates an expected call of Author
func (mr *MockPoWMockRecorder) Author(header interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Author", reflect.TypeOf((*MockPoW)(nil).Author), header)
}

// VerifyHeader mocks base method
func (m *MockPoW) VerifyHeader(chain consensus.ChainReader, header *types.Header, seal bool) error {
	ret := m.ctrl.Call(m, "VerifyHeader", chain, header, seal)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyHeader indicates an expected call of VerifyHeader
func (mr *MockPoWMockRecorder) VerifyHeader(chain, header, seal interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeader", reflect.TypeOf((*MockPoW)(nil).VerifyHeader), chain, header, seal)
}

// VerifyHeaders mocks base method
func (m *MockPoW) VerifyHeaders(chain consensus.ChainReader, headers []*types.Header, seals []bool) (chan<- struct{}, <-chan error) {
	ret := m.ctrl.Call(m, "VerifyHeaders", chain, headers, seals)
	ret0, _ := ret[0].(chan<- struct{})
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// VerifyHeaders indicates an expected call of VerifyHeaders
func (mr *MockPoWMockRecorder) VerifyHeaders(chain, headers, seals interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyHeaders", reflect.TypeOf((*MockPoW)(nil).VerifyHeaders), chain, headers, seals)
}

// VerifyUncles mocks base method
func (m *MockPoW) VerifyUncles(chain consensus.ChainReader, block *types.Block) error {
	ret := m.ctrl.Call(m, "VerifyUncles", chain, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyUncles indicates an expected call of VerifyUncles
func (mr *MockPoWMockRecorder) VerifyUncles(chain, block interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUncles", reflect.TypeOf((*MockPoW)(nil).VerifyUncles), chain, block)
}

// VerifySeal mocks base method
func (m *MockPoW) VerifySeal(chain consensus.ChainReader, header *types.Header) error {
	ret := m.ctrl.Call(m, "VerifySeal", chain, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifySeal indicates an expected call of VerifySeal
func (mr *MockPoWMockRecorder) VerifySeal(chain, header interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySeal", reflect.TypeOf((*MockPoW)(nil).VerifySeal), chain, header)
}

// Prepare mocks base method
func (m *MockPoW) Prepare(chain consensus.ChainReader, header *types.Header) error {
	ret := m.ctrl.Call(m, "Prepare", chain, header)
	ret0, _ := ret[0].(error)
	return ret0
}

// Prepare indicates an expected call of Prepare
func (mr *MockPoWMockRecorder) Prepare(chain, header interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockPoW)(nil).Prepare), chain, header)
}

// Finalize mocks base method
func (m *MockPoW) Finalize(chain consensus.ChainReader, header *types.Header, state *state.StateDB, txs []*types.Transaction, uncles []*types.Header, receipts []*types.Receipt) (*types.Block, error) {
	ret := m.ctrl.Call(m, "Finalize", chain, header, state, txs, uncles, receipts)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finalize indicates an expected call of Finalize
func (mr *MockPoWMockRecorder) Finalize(chain, header, state, txs, uncles, receipts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finalize", reflect.TypeOf((*MockPoW)(nil).Finalize), chain, header, state, txs, uncles, receipts)
}

// Seal mocks base method
func (m *MockPoW) Seal(chain consensus.ChainReader, block *types.Block, stop <-chan struct{}) (*types.Block, error) {
	ret := m.ctrl.Call(m, "Seal", chain, block, stop)
	ret0, _ := ret[0].(*types.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seal indicates an expected call of Seal
func (mr *MockPoWMockRecorder) Seal(chain, block, stop interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seal", reflect.TypeOf((*MockPoW)(nil).Seal), chain, block, stop)
}

// APIs mocks base method
func (m *MockPoW) APIs(chain consensus.ChainReader) []rpc.API {
	ret := m.ctrl.Call(m, "APIs", chain)
	ret0, _ := ret[0].([]rpc.API)
	return ret0
}

// APIs indicates an expected call of APIs
func (mr *MockPoWMockRecorder) APIs(chain interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIs", reflect.TypeOf((*MockPoW)(nil).APIs), chain)
}

// Hashrate mocks base method
func (m *MockPoW) Hashrate() float64 {
	ret := m.ctrl.Call(m, "Hashrate")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Hashrate indicates an expected call of Hashrate
func (mr *MockPoWMockRecorder) Hashrate() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hashrate", reflect.TypeOf((*MockPoW)(nil).Hashrate))
}
