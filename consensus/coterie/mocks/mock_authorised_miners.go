// Code generated by MockGen. DO NOT EDIT.
// Source: authorised_miners.go

// Package mocks is a generated GoMock package.
package mocks

import (
	ecdsa "crypto/ecdsa"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAuthorisedWhitelist is a mock of AuthorisedWhitelist interface
type MockAuthorisedWhitelist struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorisedWhitelistMockRecorder
}

// MockAuthorisedWhitelistMockRecorder is the mock recorder for MockAuthorisedWhitelist
type MockAuthorisedWhitelistMockRecorder struct {
	mock *MockAuthorisedWhitelist
}

// NewMockAuthorisedWhitelist creates a new mock instance
func NewMockAuthorisedWhitelist(ctrl *gomock.Controller) *MockAuthorisedWhitelist {
	mock := &MockAuthorisedWhitelist{ctrl: ctrl}
	mock.recorder = &MockAuthorisedWhitelistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthorisedWhitelist) EXPECT() *MockAuthorisedWhitelistMockRecorder {
	return m.recorder
}

// IsMinerInWhitelist mocks base method
func (m *MockAuthorisedWhitelist) IsMinerInWhitelist(minerAddress common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsMinerInWhitelist", minerAddress)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMinerInWhitelist indicates an expected call of IsMinerInWhitelist
func (mr *MockAuthorisedWhitelistMockRecorder) IsMinerInWhitelist(minerAddress interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMinerInWhitelist", reflect.TypeOf((*MockAuthorisedWhitelist)(nil).IsMinerInWhitelist), minerAddress)
}

// GetWhitelistSize mocks base method
func (m *MockAuthorisedWhitelist) GetWhitelistSize() (uint, error) {
	ret := m.ctrl.Call(m, "GetWhitelistSize")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWhitelistSize indicates an expected call of GetWhitelistSize
func (mr *MockAuthorisedWhitelistMockRecorder) GetWhitelistSize() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWhitelistSize", reflect.TypeOf((*MockAuthorisedWhitelist)(nil).GetWhitelistSize))
}

// AddMinerToWhitelist mocks base method
func (m *MockAuthorisedWhitelist) AddMinerToWhitelist(minerAddress common.Address, msgSender *ecdsa.PrivateKey) (*types.Transaction, error) {
	ret := m.ctrl.Call(m, "AddMinerToWhitelist", minerAddress, msgSender)
	ret0, _ := ret[0].(*types.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMinerToWhitelist indicates an expected call of AddMinerToWhitelist
func (mr *MockAuthorisedWhitelistMockRecorder) AddMinerToWhitelist(minerAddress, msgSender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMinerToWhitelist", reflect.TypeOf((*MockAuthorisedWhitelist)(nil).AddMinerToWhitelist), minerAddress, msgSender)
}
